<pre class='metadata'>
Title: 2020 Fall Library Evolution Polls
Shortname: P2233
Revision: 2
Status: P
Group: WG21
Audience: WG21
Editor: Bryce Adelstein Lelbach (he/him/his) — Library Evolution Chair, NVIDIA, brycelelbach@gmail.com
URL: https://wg21.link/P2233R2
!Source: <a href="https://github.com/brycelelbach/wg21_p2233_2020_fall_library_evolution_polls/blob/main/2020_fall_library_evolution_polls.bs">GitHub</a>
Issue Tracking: GitHub https://github.com/brycelelbach/wg21_p2233_2020_fall_library_evolution_polls/issues
Metadata Order: Author, This Version, Source, Issue Tracking, Project, Audience
Markup Shorthands: markdown yes
Toggle Diffs: no
No Abstract: yes
Boilerplate: style-syntax-highlighting off
</pre>

<style>
pre {
  margin-top: 0px;
  margin-bottom: 0px;
}
.ins, ins, ins *, span.ins, span.ins * {
  background-color: rgb(200, 250, 200);
  color: rgb(0, 136, 0);
  text-decoration: none;
}
.del, del, del *, span.del, span.del * {
  background-color: rgb(250, 200, 200);
  color: rgb(255, 0, 0);
  text-decoration: line-through;
  text-decoration-color: rgb(255, 0, 0);
}
math, span.math {
  font-family: serif;
  font-style: italic;
}
ul {
  list-style-type: "— ";
}
blockquote {
  counter-reset: paragraph;
}
div.numbered, div.newnumbered {
  margin-left: 2em;
  margin-top: 1em;
  margin-bottom: 1em;
}
div.numbered:before, div.newnumbered:before {
  position: absolute;
  margin-left: -2em;
  display-style: block;
}
div.numbered:before {
  content: counter(paragraph);
  counter-increment: paragraph;
}
div.newnumbered:before {
  content: "�";
}
div.numbered ul, div.newnumbered ul {
  counter-reset: list_item;
}
div.numbered li, div.newnumbered li {
  margin-left: 3em;
}
div.numbered li:before, div.newnumbered li:before {
  position: absolute;
  margin-left: -4.8em;
  display-style: block;
}
div.numbered li:before {
  content: "(" counter(paragraph) "." counter(list_item) ")";
  counter-increment: list_item;
}
div.newnumbered li:before {
  content: "(�." counter(list_item) ")";
  counter-increment: list_item;
}
</style>

## Introduction ## {#introduction}

This paper contains the decision polls that the C++ Library Evolution group
  will take in Fall of 2020.

## Voting ## {#voting}

These decision polls will be conducted electronically; see [[P2195R0]] for
  more information on electronic voting procedures.

All committee members may vote, but if you have not participated in the Library
  Evolution discussions of a poll, please choose to not vote.

### How to Vote ### {#how-to-vote}

<b><a href="https://documents.isocpp.org/index.php/apps/forms/p9rmfTQTEPpopQtb">Vote here</a></b>

A documents.isocpp.org account is necessary to vote.
If you have an isocpp.org/papers account, a documents.isocpp.org account has
  been created for you.
Just go to documents.isocpp.org and reset your password.
Email <a href="mailto:brycelelbach@gmail.com">Bryce Adelstein Lelbach</a> if you
  do not have an account or are having trouble accessing your account.

If you see "Form not found" when you go to the above link, you are not signed
  in to documents.isocpp.org.
Go to documents.isocpp.org and sign in first.

You will not receive a confirmation email after voting.
The Library Evolution chairs will send a confirmation to all voters before the
  close of the poll.

If you need to change how you voted or have any questions or issues about
  voting, please email
  <a href="mailto:brycelelbach@gmail.com">Bryce Adelstein Lelbach</a>.

### Voting Timeline ### {#voting-timeline}

- 2020-10-13: Draft polls distributed by mailing list.
- 2020-10-22: Final discussion telecon on the polls.
    Start of the polling period.
- 2020-11-16: Chairs send a reminder to all voters of how they voted.
- 2020-11-19: End of the polling period.
- 2020-11-20: Chairs share results and summarize consensus and conclusions of
    the results.

## Polls ## {#poll}

Each poll consists of a statement; you vote on whether you support the
  statement.
All polls will be 5-way polls; you'll vote either "strongly favor",
  "weakly favor", "neutral", "weakly against", or "strongly against".
If you do not want to participate in a poll, select the "I do not want to
  participate in this poll" option.
Those who do not participate in a poll will not be counted or recorded.

Each poll has a comment field.
Please write a few sentences explaining the rationale for your vote.

Poll results and comments will be shared with Library Evolution after the end of
  the polling period, including attribution of your votes and comments.

If you want to discuss the polls or how you plan on voting, please start an
  email thread on the
  <a href="lib-ext@lists.isocpp.org">Library Evolution mailing list</a>.

### Executor Polls ### {#executor-polls}

The following C++ Library Evolution polls relate to executors ([[P0443R14]]),
  a proposed set of abstractions for asynchronously creating and managing
  execution agents.
These polls are based on the reports of the six breakout groups that reviewed
  various aspects of the executors proposal in the Summer of 2020
  ([[P2202R0]], [[P2203R0]], [[P2183R0]], [[P2205R0]], [[P2206R0]], and [[P2207R0]]).

#### Poll 0 #### {#poll-0}

Remove implicit adaptation from [[P0443R14]] (Executors) by applying
  [[P2235R0]] to [[P0443R14]]) which will:
- Make `schedule` only take `scheduler`s.
- Make `execute` only take `executor`s.
- Make sender and receiver operations like `connect` only take senders and
    receivers.
- Add explicit adaptation from `executor` to `scheduler`
    (`make_scheduler_from_executor`) but not vice versa.

#### Poll 1 #### {#poll-1}

Use one class for each individual trait instead of combined traits classes
  (`sender_traits`, etc) in [[P0443R14]] (Executors).

#### Poll 2 #### {#poll-2}

Remove `static_thread_pool` from [[P0443R14]] (Executors).
It may be pursued in a follow-on proposal.

#### Poll 3 #### {#poll-3}

Remove `any_executor` from [[P0443R14]] (Executors).
It may be pursued in a follow-on proposal.

#### Poll 4 #### {#poll-4}

Remove `any_executor::target` and `any_executor::target_type` from [[P0443R14]]
  (Executors).

#### Poll 5 #### {#poll-5}

[[P0443R14]] (Executors) is sufficiently mature that we should aim to ship
  it in C++23.

### Other Polls ### {#other-polls}

#### Poll 6 #### {#poll-6}

Send [[P2212R1]] (Relax Requirements for `time_point::clock`) to LWG for C++23,
  classified as an improvement of an existing feature ([[P0592R4]] bucket
  2 item).

#### Poll 7 #### {#poll-7}

Send [[P2166R1]] (Prohibit `basic_string` and `basic_string_view` Construction
  from `nullptr`) to LWG for C++23, classified as an improvement of an
  existing feature ([[P0592R4]] bucket 2 item).

#### Poll 8 #### {#poll-8}

Send [[P2161R0]] (Remove Default Candidate Executor) to LWG for the Networking
  TS Working Draft, classified as a focus work item ([[P0592R4]] bucket 1 item).

<pre class=biblio>
{
  "P2235R0": {
    "authors": [
      "Ville Voutilainen"
    ],
    "href": "https://isocpp.org/files/papers/P2235R0.html",
    "title": "Disentangling Schedulers and Executors",
    "date": "2020-10-15"
  }
}
</pre>
